%BREADCRUMBS{ format="$name" separator=" Â» "}%

%TOC%
---++ Specification for Conduit Release 1.x
---+++ Producer
   1. Message should be [[https://github.corp.inmobi.com/Platform/pintail/blob/master/messaging-client-core/src/main/java/com/inmobi/messaging/Message.java][Message specification]]
   1. Messages can be logged to conduit using [[https://github.corp.inmobi.com/Platform/pintail/blob/master/messaging-client-core/src/main/java/com/inmobi/messaging/publisher/MessagePublisher.java][Publisher API]]
   1. [[https://github.corp.inmobi.com/Platform/pintail/blob/master/messaging-client-core/src/main/java/com/inmobi/messaging/publisher/MessagePublisherFactory.java][Publisher Factory API]] can be used to create concrete publisher.
   1. [[https://github.corp.inmobi.com/Platform/pintail/tree/master/messaging-client-core/src/main/java/com/inmobi/messaging/publisher/examples][Examples]]
   1. Available maven artifacts [[https://twiki.corp.inmobi.com/TechPlatform/MessagingClient#Maven_artifacts][Here]]
   1. Producer specification of 0.1 is deprecated. Deprecated support is described below.
   1. Configuration 
      * Add runtime dependency to [[https://github.corp.inmobi.com/Platform/pintail/tree/master/messaging-client-scribe][messaging-client-scribe]].
      * Sample [[https://github.corp.inmobi.com/Platform/pintail/blob/master/conf/messaging-publisher-conf.properties][messaging-publisher-conf.properties]]
   1. Log Appender *(Deprecated support for 0.1 specification)*: 
      * Add runtime dependency to [[https://github.corp.inmobi.com/Platform/pintail/tree/master/messaging-client-logappender][messaging-client-logappender]].
      * Sample [[https://github.corp.inmobi.com/Platform/pintail/blob/master/messaging-client-logappender/src/test/resources/log4j.properties][log4j.properties]]
   1. More documentation at [[https://twiki.corp.inmobi.com/TechPlatform/MessagingClient#Publisher][Publisher doc]]
---+++ Streaming Consumer
   1. Message will be [[https://github.corp.inmobi.com/Platform/pintail/blob/master/messaging-client-core/src/main/java/com/inmobi/messaging/Message.java][Message specification]]
   1. Messages can be consumed from the [[https://github.corp.inmobi.com/Platform/pintail/blob/master/messaging-client-core/src/main/java/com/inmobi/messaging/consumer/MessageConsumer.java][Consumer API]]
   1. [[https://github.corp.inmobi.com/Platform/pintail/blob/master/messaging-client-core/src/main/java/com/inmobi/messaging/consumer/MessageConsumerFactory.java][Consumer factory API]] can be used to create concrete consumer object.
   1. Available maven artifacts [[https://twiki.corp.inmobi.com/TechPlatform/MessagingClient#Maven_artifacts][Here]]
   1. [[https://github.corp.inmobi.com/Platform/pintail/tree/master/messaging-client-core/src/main/java/com/inmobi/messaging/consumer/examples][Examples]]
   1. Messages can be consumed from a conduit stream, all types of publishing. See [[https://twiki.corp.inmobi.com/TechPlatform/MessagingClient#Consuming_messages_from_Conduit][Here]] for more details.
   1. Messages can be consumed from Hadoop directories following the date contract. See [[https://twiki.corp.inmobi.com/TechPlatform/MessagingClient#Consuming_messages_from_HDFS_dir][Here]] for more details.
   1. More documentation at [[https://twiki.corp.inmobi.com/TechPlatform/MessagingClient#Streaming_Consumer][Consumer doc]]
---+++ Batch Consumer
   1. Data gets collected in HDFS cluster in minute level directories at 
      * <strong>/conduit/streams_local/[</strong><em>streamName</em><strong>]/yyyy/MM/dd/HH/mm</strong> 
         * contains data produced in the local DC of a particular stream
         * yyyy/MM/yy/HH/mm represent Year/Month/Date/Hour/Minute in UTC
      * <strong>/conduit/streams/[</strong><em>streamName</em><strong>]/</strong><strong>yyyy/MM/dd/HH/mm</strong> 
         * contains the data produced in ALL the DCs of a particular stream
         * yyyy/MM/yy/HH/mm represent Year/Month/Date/Hour/Minute in UTC
   1. Decoding messages from the file 
      * All data files in the minute level directores are gzip compressed
      * Data is Base-64 encoded. Each message is separated by newline character
   1. Data immutability guarantee 
      * Timestamp directories (yyyy/MM/yy/HH/mm) are always created in increasing timeline.
      * Minute directories are created at minute intervals in all cases.
      * When the directory for a particular minute is created, the directory for previous minute becomes immutable.
   1. BCP 
      * Mirror of a stream can be configured in another cluster. Mirrored stream has exactly the same directory layout in HDFS as the primary. Typically the mirrorred stream will lag the primary by a few minutes.
      * Incase of "primary stream" cluster taken into maintenance, applications can move their processing on to the mirror cluster. In certain cases, if before all data is mirrored, the "primary stream" cluster goes down. vThen that data would arrive in mirror cluster only after primary comes back up. Typically that would not be more than a few minutes of data. This data is arrived in mirror cluster in the "original" minute directories. Applications wanting to be fully BCP compliant should have a way to process the late arriving data. Operations team would notify the applications of the late arriving data directories.

---++ Spec for older versions
   * [[https://twiki.corp.inmobi.com/TechPlatform/ConduitSpec-0_1][Conduit-0.1 Release]]
---++ Staging env for dev testing
   * [[https://twiki.corp.inmobi.com/Ops/ConduitOperations#Staging][Conduit STG ENV]]
   * [[https://twiki.corp.inmobi.com/pub/TechPlatform/ConduitSpec/stg-sample-conduit.rtf][Conduit STG sample conduit.xml]]
---++ Contact

Please contact @conduit-dev for any issues.

Please subscribe to @conduit-users to get updates about the product.

