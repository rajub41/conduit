 -----
 Conduit client
 -----
 -----
 -----

Conduit client



*API Best practices



**How should i gracefully close the consumer?


 You should call consumer.close() for closing the consumer. If you want to checkpoint your consumption you should call mark() before calling close(). If you want to mark the consumer in shutdown hook, please see the {{{./#FileSystem_closed_Exception_duri.html}FileSystem closed exception in the below section}}.



**How do i checkpoint my consumption to withstand crashes?


 You should periodically call mark(). Avoid calling mark() after every message, because it will cause IO. But if your application logic mandates to no duplicate processing even with crashes, you might have to call mark() after processing every message.



**How do I make sure all my messages are published, before closing the publisher?


 For publisher library versions 1.4.x and later: You can publish all the messages and call publisher.close().


 For publisher library versions 1.3.x and earlier :


 Before closing the publisher, wait for all the inflight messages to be published. Sample code is as follows:



+------+
     // wait for complete
     while (publisher.getStats(topic).getInFlight() \> 0) \{
       try \{
         Thread.sleep(100);
       \} catch (InterruptedException e) \{
         e.printStackTrace();
         break;
       \}
     \}
     publisher.close();


+------+


*Exceptions/Issues while integrating with conduit producer/consumer library



**ReadTimeoutException


 Why I'm seeing the following {{{./ReadTimeoutException.html}ReadTimeoutException}} in my publisher logs?



+------+
WARN netty.ScribeHandler: Exception caught:
org.jboss.netty.handler.timeout.ReadTimeoutException
at org.jboss.netty.handler.timeout.ReadTimeoutHandler.\<clinit\>(ReadTimeoutHandler.java:84)
at com.inmobi.messaging.netty.ScribePipelineFactory.getPipeline(ScribePipelineFactory.java:27)
at org.jboss.netty.bootstrap.ClientBootstrap.connect(ClientBootstrap.java:212)
at org.jboss.netty.bootstrap.ClientBootstrap.connect(ClientBootstrap.java:188)
at com.inmobi.messaging.netty.ScribeMessagePublisher$ChannelSetter.connect(ScribeMessagePublisher.java:70)
at com.inmobi.messaging.netty.ScribeMessagePublisher.init(ScribeMessagePublisher.java:105)
at com.inmobi.messaging.netty.ScribeMessagePublisher.init(ScribeMessagePublisher.java:121)
at com.inmobi.messaging.publisher.MessagePublisherFactory.create(MessagePublisherFactory.java:87)
at com.inmobi.messaging.publisher.MessagePublisherFactory.create(MessagePublisherFactory.java:62)

+------+

 <<Answer:>>


 First of all, note that it is harmless. {{{./ReadTimeoutException.html}ReadTimeoutException}} happens when there are no messages sent from publisher within scribe.timeoutSeconds (by default 5 seconds). So, if your frequency of sending messages is more than 5 seconds, the value of scribe.timeoutSeconds in publisher configuration should be increased to higher value. It should be more than your frequency of sending messages to avoid {{{./ReadTimeoutException.html}ReadTimeoutException}}.



**SLF4J IllegalAccess Error


 Exception in thread "main" java.lang.IllegalAccessError: tried to access field org.slf4j.impl.StaticLoggerBinder.SINGLETON from class org.slf4j.LoggerFactory



+------+
at org.slf4j.LoggerFactory.\<clinit\>(LoggerFactory.java:65)
at com.inmobi.messaging.publisher.AbstractMessagePublisher.\<clinit\>(AbstractMessagePublisher.java:26)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:169)
at com.inmobi.messaging.publisher.MessagePublisherFactory.create(MessagePublisherFactory.java:80)

+------+

 As per {{{http://www.slf4j.org/faq.html}SLF4J FAQ}} this happens {{{./SunSans.html}SunSans}} \-Regular, sans\-serif;"\>This error is caused by the static initilizer of the <<<{{{./LoggerFactory.html}LoggerFactory}}>>><code style="font-family: Courier, monospace;">org.slf4j.impl.StaticLoggerBinder</code><span style="font-family: Verdana, Arial, <span class=">{{{./SunSans.html}SunSans}}</span>\-Regular, sans\-serif;"\>


 If you get the exception shown above, then you are using an older version of slf4j\-api, e.g. 1.4.3, with a new version of a slf4j binding, e.g. 1.5.6. Typically, this occurs when your Maven <pom.ml> file incoprporates hibernate 3.3.0 which declares a dependency on slf4j\-api version 1.4.2. If your <pom.xml> declares a dependency on an slf4j binding, say slf4j\-log4j12 version 1.5.6, then you will get illegal access errors.



**I am calling publish but don't see any messages in CONDUIT. What should I do?


 <<<publish()>>> is an async call and if you have a unit test\-case which calls publish and exits the JVM you'd find a scenario like this. putting SLEEP in tests might be helpful however we don't expect this to happen in PROD.



**FileSystem closed Exception during consumer close


 If you are seeing a lot of {{{./FileSystem.html}FileSystem}} closed exception while closing consumer, like the one below



+------+
 java.io.IOException: Filesystem closed 
at org.apache.hadoop.hdfs.DFSClient.checkOpen(DFSClient.java:232) 
at org.apache.hadoop.hdfs.DFSClient.access$600(DFSClient.java:70)
at org.apache.hadoop.hdfs.DFSClient$DFSInputStream.close(DFSClient.java:1859)
at java.io.FilterInputStream.close(FilterInputStream.java:155)
at sun.nio.cs.StreamDecoder.implClose(StreamDecoder.java:358)
at sun.nio.cs.StreamDecoder.close(StreamDecoder.java:173)
at java.io.InputStreamReader.close(InputStreamReader.java:182)
at java.io.BufferedReader.close(BufferedReader.java:497)
at com.inmobi.conduit.readers.CollectorStreamReader.closeCurrentFile(CollectorStreamReader.java:125)
at com.inmobi.conduit.readers.CollectorStreamReader.openCurrentFile(CollectorStreamReader.java:108)
at com.inmobi.conduit.readers.StreamReader.openStream(StreamReader.java:49)
at com.inmobi.conduit.partition.AbstractPartitionStreamReader.openStream(AbstractPartitionStreamReader.java:29)
at com.inmobi.conduit.partition.PartitionReader.execute(PartitionReader.java:200)
at com.inmobi.conduit.partition.PartitionReader$1.run(PartitionReader.java:133)
at java.lang.Thread.run(Thread.java:662)

+------+

 Then you might be closing your consumer in a shutdown hook. But {{{./FileSystem.html}FileSystem}} has a shutdown hook to close all the {{{./FileSystem.html}FileSystem}} objects in shutdown hooks. Since the order of shutdown hooks can be arbitrary, so the Filesystems can be closed first, even before closing the Consumer.


 <<Effect>> : If you are marking the consumer also in shutdown hook, and the filesystem is closed before consumer close, the mark would not succeed.


 <<Fix>>: The fix is to put the following configuration in your core\-site.xml or your hadoop configuration file passed via <<<messaging.consumer.hadoop.conf>>> :



+------+
\<?xml version\="1.0"?\> 
\<?xml\-stylesheet type\="text/xsl" href\="configuration.xsl"?\>
 \<configuration\> 
\<property\>
 \<name\>fs.automatic.close\</name\>
 \<value\>false\</value\> 
\<description\>By default, FileSystem instances are automatically closed at program exit using a JVM shutdown hook.
 Setting this property to false disables this behavior. This is an advanced option that should only be used by server
 applications requiring a more carefully orchestrated shutdown sequence. \</description\> 
\</property\> 
\</configuration\> 

+------+

 With above configuration, the filesystems wont be closed automatically in shutdown hook.



Scribe



*Why do we not use the encodeBase64 flag in the secondary stores?


 

 * If we use this flag in secondary stores then messages will be encoded to base64 while spooling and de\-spooling if the encodedBase64 flag is true. We should not use the encodedBase64 flag in secondary stores to avoid the double encoding of messages.

 []



